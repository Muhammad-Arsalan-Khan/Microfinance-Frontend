import { useState } from "react"
import {
  Modal,
  Box,
  Typography,
  Button,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
} from "@mui/material"
import { jsPDF } from "jspdf"
import axios from "axios"
import config from "../../config.js"
import Cookies from "js-cookie"

const style = {
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: 500,
  bgcolor: "background.paper",
  borderRadius: 2,
  boxShadow: 24,
  p: 4,
  maxHeight: "90vh",
  overflowY: "auto",
};

function ViewDetailsModal({ open, handleClose, application }) {
  const [loanStatus, setloanStatus] = useState(application.loanStatus || "Pending");

  const handleDownload = () => {
    const doc = new jsPDF()
    const pageWidth = doc.internal.pageSize.getWidth()
    const pageHeight = doc.internal.pageSize.getHeight()
    const margin = 15
    let y = margin + 30

    doc.setTextColor("#005EB8")
    doc.setFontSize(22)
    doc.setFont("helvetica", "bold")
    doc.text("Microfinance", pageWidth / 2, margin + 10, { align: "center" })

    doc.setDrawColor("#8BC441")
    doc.setLineWidth(1.5);
    doc.rect(margin, margin, pageWidth - margin * 2, pageHeight - margin * 2)

    
    doc.setTextColor(0)
    doc.setFontSize(12)
    doc.setFont("helvetica", "normal")

    const lineHeight = 8
    const labelX = margin + 5
    const valueX = margin + 60

    const addLine = (label, value) => {
      if (y > pageHeight - margin - 50) {
        doc.addPage();
        y = margin;
      }
      doc.setFont("helvetica", "bold")
      doc.text(`${label}:`, labelX, y)
      doc.setFont("helvetica", "normal")
      doc.text(`${value}`, valueX, y)
      y += lineHeight;
    }

    // Add data
    addLine("User Name", application.userName)
    addLine("Email", application.userEmail)
    addLine("CNIC", application.userCnic)
    addLine("Loan Status", application.loanStatus)
    addLine("Category", `${application.category} - ${application.subCategory}`)
    addLine("Requested Amount", application.requestedAmount)
    addLine("Initial Payment", application.initialPayment)
    addLine("Monthly Installment", application.monthlyInstallment)
    addLine("Duration (Months)", application.durationMonths)
    addLine("Appointment Date", application.appointmentDate)
    addLine("Appointment Time", application.appointmentTime)
    addLine("Appointment Location", application.appointmentLocation)
    addLine("ID (Token)", application.token)

    y += 4;
    doc.setFont("helvetica", "bold")
    doc.text("Guarantors:", labelX, y)
    y += lineHeight;

    application.guarantors.forEach((g, i) => {
      const line = `${i + 1}. ${g.name} | ${g.email} | ${g.cnic} | ${
        g.location
      }`;
      if (y > pageHeight - margin - 50) {
        doc.addPage()
        y = margin
      }
      doc.setFont("helvetica", "normal")
      doc.text(line, labelX, y)
      y += lineHeight
    });

    const lineY = pageHeight - 35;
    doc.setDrawColor("#000");
    doc.line(margin + 20, lineY, pageWidth - margin - 20, lineY)

    doc.setFont("helvetica", "italic")
    doc.setFontSize(11)
    doc.setTextColor("#444")
    doc.text("Authorized Signature / Stamp", margin + 20, lineY + 6)
    doc.setFontSize(10)
    doc.setTextColor(150)
    doc.text(
      "Generated by Microfinance Loan System",
      margin + 5,
      pageHeight - 5
    )
    doc.save("loan-details.pdf")
  }

  const handleApply = async () => {

    try {
      const id = application._id;
      // const response = await axios.patch(
      //   `${config.baseURL}/api/admin/loanapproved/${id}`,
      //   { loanStatus },
      //   { withCredentials: true }
      // )
       const response = await axios.patch(
        `${config.baseURL}/api/admin/loanapproved/${id}`,
        { loanStatus },
        { 
          headers:{
            Authorization: `Bearer ${Cookies.get("token")} `
          }
        }
      )
      handleClose()
    } catch (err) {
      console.error("failed to update status", err);
    }
  };

  return (
    <Modal open={open} onClose={handleClose}>
      <Box sx={style}>
        <Typography variant="h6" gutterBottom>
          View Details
        </Typography>

        <Typography>
          <strong>User Name:</strong> {application.userName}
        </Typography>
        <Typography>
          <strong>Email:</strong> {application.userEmail}
        </Typography>
        <Typography>
          <strong>CNIC:</strong> {application.userCnic}
        </Typography>
        <Typography>
          <strong>Status:</strong> {application.loanStatus}
        </Typography>
        <Typography>
          <strong>Category:</strong> {application.category} -{" "}
          {application.subCategory}
        </Typography>
        <Typography>
          <strong>Amount:</strong> {application.requestedAmount}
        </Typography>
        <Typography>
          <strong>Initial Payment:</strong> {application.initialPayment}
        </Typography>
        <Typography>
          <strong>Installment:</strong> {application.monthlyInstallment}
        </Typography>
        <Typography>
          <strong>Duration:</strong> {application.durationMonths} months
        </Typography>
        <Typography>
          <strong>Appointment:</strong> {application.appointmentDate} at{" "}
          {application.appointmentTime}
        </Typography>
        <Typography>
          <strong>Location:</strong> {application.appointmentLocation}
        </Typography>
        <Typography>
          <strong>ID:</strong> {application.token}
        </Typography>

        <Typography mt={2}>
          <strong>Guarantors:</strong>
        </Typography>

        {application.guarantors.map((g, i) => (
          <Typography key={i}>
            {i + 1}. {g.name} | {g.email} | {g.cnic} | {g.location}
          </Typography>
        ))}

        {application.salarySlipURL && (
          <>
            <Typography mt={2}>
              <strong>Salary Slip/Bank Statement:</strong>
            </Typography>
            <img
              src={application.salarySlipURL}
              alt="statement"
              style={{ width: "100%", marginBottom: "20px" }}
            />
          </>
        )}

        <FormControl fullWidth sx={{ mt: 3 }}>
          <InputLabel>Status</InputLabel>
          <Select
            value={loanStatus}
            onChange={(e) => setloanStatus(e.target.value)}
            label="Status"
          >
            <MenuItem value="Pending">Pending</MenuItem>
            <MenuItem value="Rejected">Rejected</MenuItem>
            <MenuItem value="Approved">Approved</MenuItem>
            <MenuItem value="Completed">Completed</MenuItem>
          </Select>
        </FormControl>

        <Box display="flex" justifyContent="space-between" mt={3}>
          <Button variant="outlined" onClick={handleClose}>
            Cancel
          </Button>
          <Button variant="contained" color="success" onClick={handleApply}>
            Apply
          </Button>
          <Button variant="contained" onClick={handleDownload}>
            Download PDF
          </Button>
        </Box>
      </Box>
    </Modal>
  )
}

export default ViewDetailsModal
